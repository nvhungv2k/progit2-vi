=== Cơ bản về Git

Vậy, Git là gì?
Đây là phần quan trọng để tiếp thu, bởi vì nếu bạn biết Git là gì và những nguyên lí làm việc của nó, thì khi sử dụng Git sẽ dễ dàng hơn nhiều.
Khi bạn học Git, đầu tiên cố gắng xóa bỏ hết trong đầu bạn những thứ bạn có thể biết về VCS khác như CVS, Subversion hoặc Perforce -- làm thế sẽ giúp bạn loại bỏ được sự nhầm lẫn khi sử dụng công cụ.
Mặc dù, giao diện của Git khá giống với những VCS khác, nhưng Git lưu trữ và nghĩ về thông tin theo một cách rất khác, và chính việc hiểu rõ sự khác nhau giữa Git và các VCS sẽ giúp loại trừ nhầm lẫn trong khi sử dụng nó.(((Subversion)))(((Perforce)))

==== Snapshots, chứ không phải là Thay đổi

Sự khác biệt chính giữa Git và bất kì một VCS nào khác là cái cách mà Git nghĩ về dữ liệu của nó.
Về mặt nguyên lí, hầu hết các hệ thống khác Git (như CVS, Subversion, Perforce, Bazar,...) lưu trữ thay đổi của tệp tin theo thời gian.

.Lưu trữ dữ liệu kiểu chỉ lưu những thay đổi.
image::images/deltas.png[storing data as changes to a base version of each file.]

git không nghĩ hoặc lưu trữ dữ liệu theo cách đó.
thay vào đó, git nghĩ về dữ liệu là một chuỗi snapshot (nghĩa là, toàn bộ dữ liệu).
với git, mỗi lần bạn commit, hoặc lưu trạng thái của dự án, git sẽ tạo một snapshot và lưu tham chiếu tới snapshot đó.
để hiệu quả, nếu tệp tin không thay đổi, git sẽ không lưu tệp tin đó lại, chỉ liên kết với nó ở snapshot trước.
git nghĩ về dữ liệu của nó giống hơn là *một luông snapshot*.

.lưu trữ dữ liệu theo kiểu snapshot theo thời gian.
image::images/snapshots.png[git stores data as snapshots of the project over time.]

Đây chính là sự khác nhau quan trọng giữa git và các VCS khác.
Sự khác biệt này làm cho Git cân nhắc lại mọi khí cạnh của quản lí phiên bản mà hầu hết các VCS khác sao chép từ thế hệ trước.
Chình vì thế Git giống một hệ thống quản lí tập tin thu nhỏ (mini filesystem) được trang bị một vài tính năng rất mạnh, hơn là việc đơn thuần chỉ là một vcs.
Chúng ta sẽ khám phá lợi ích có được của việc nghĩ dữ liệu theo cách này trong <<ch03-git-branching#ch03-git-branching>>.

==== Gần như mọi hoạt động diễn ra tại chỗ

Hầu hết các hoạt động của Git chỉ cần các tệp và tài nguyên tại chỗ -- nhìn chung không có thông tin cần từ máy tính khác trong mạng lưới của bạn.
Nếu bạn sử dụng một CVCS, hầu hết các hoạt động phải sử dụng thông tin từ máy chủ, còn với Git toàn bộ thông tin đã ở trên máy tính của bạn, vì thế hầu như mọi hoạt động diễn ra tức thì, điều đó làm cho bạn có cảm giác là vị thần tốc độ đang phù hộ cho Git.

Ví dụ, để duyệt lịch sử của dự án, git không cần tới máy chủ để lấy lịch sử và sau đó hiển thị lên cho bạn -- rất đơn giản, nó chỉ đọc trực tiếp từ cơ sở dữ liệu ngay trên máy tính của bạn.
điều đó nghĩa rằng bạn sẽ nhìn thấy lịch sử của dự án hầu như ngay tức thì.
Nếu bạn muốn xem những thay đổi của một tệp tin ở thời điểm hiện tại với thời điểm một tháng trước, git có thể tìm tệp tin đó ở thời điểm 1 tháng trước và tính toán sự khác nhau cho bạn, chứ không cần phải yêu cầu máy chủ làm việc đó hoặc kéo phiên bản tệp tin đó ở thời điểm 1 tháng trước từ máy chủ và sau đó mới thực hiện tính toán sự khác nhau.

Điều này cũng có nghĩa là rất ít việc có thể làm được nếu bạn đang offline hoặc ngắt vpn.
Nếu bạn ở trên máy bay hoặc tàu hỏa và muốn làm việc, bạn vẫn có thể commit (tới cơ sở dữ liệu trên máy của bạn) cho tới khi bạn có thể kết nối internet để upload công việc của mình.
Nếu bạn ở nhà và mạng internet không làm việc, bạn vẫn có thể làm việc.
Đối với nhiều hệ thống khác, làm vậy một là không thể hoặc là khó khăn.
Ví dụ, với perforce, bạn không thể làm nhiều thứ khi bạn không kết nối tới máy chủ; và với subversion và cvs, bạn có thể thay đổi các tệp, nhưng không thể commit những thay đổi tới cơ sở dữ liệu của bạn.
Đây dường như không phải là điều gì lớn lao, nhưng bạn có thể ngạc nhiên về sự khác biệt lớn nó có thể làm.

==== git có tính toàn vẹn

Mọi thứ trong Git được checksum (tạo mã băm) trước khi được lưu trữ và sau đó dùng chúng mã checksum để tham chiếu tới dữ liệu đó.
Điều đó có nghĩa là không thể thay đổi bất kì nội dung của bất kì tệp tin hoặc thư mục nào mà qua mặt được Git.
Chứ năng này là chức năng sẵn có của Git ở mức thấp nhất và đã thành triết lí của nó.
Bạn không thể mất thông tin trong khi truyền hoặc lấy về một tệp hỏng mà Git không phát hiện ra nó.

Kỹ thuật Git sử dụng để checksum có tên là SHA-1 hash (gọi là mã SHA-1).(((SHA-1)))
Đây là một chuỗi gồm 40 kí tự hexa (cơ số 16) và được tính toán dựa trên nội dung của một tệp hoặc cấu trúc thư mục trong Git.
Một mã SHA-1 trông giống như sau:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Bạn sẽ nhìn thấy chúng rất nhiều trong Git vì Git sử dụng chúng rất nhiều.
Trong thực tế, Git lưu mọi thứ trong cơ sở dữ liệu không phải bằng tên tệp (filename) mà sử dụng mã SHA-1 nội dung của tệp đó.

==== Nói chung Git chỉ thêm dữ liệu

Khi bạn làm việc với Git, các hành động của nó hầu như chỉ thêm dữ liệu tới cơ sở dữ liệu.
Rất khó để làm cho Git làm việc gì mà không khôi phục lại được hoặc xóa dữ liệu đi bằng mọi cách.
Giống như với các VCS khác, bạn có thể mất hoặc làm rối tung những thay đổi mà bạn chưa commit, nhưng sau khi đã commit thì nó rất khó bị mất, đặc biệt nếu bạn đã đẩy cơ sở dữ liệu của mình tới một kho chứa khác.

Điều này làm cho việc sử dụng Git trở nên thích thú bởi vì chúng ta có thể thử nghiệm mà không có mối nguy hại về phá hỏng cái gì.
Để tìm hiểu sâu hơn về việc Git lưu trữ dữ liệu của nó như thế nào và làm thế nào để khôi phục dữ liệu dường như đã mất, xem <<ch02-git-basics-chapter#_undoing>>.

==== Ba trạng thái

Bây giờ, chú ý -- đây là thứ chính cần nhớ về Git nếu bạn muốn học phần sau trôi chảy.
Git có 3 trạng thái mà tệp tin trải qua:_committed_, _modified_, and _staged_:

* Committed nghĩa là dữ liệu đã được lưu trữ an toàn vào cơ sở dữ liệu của bạn.
* Modified nghĩa là bạn đã thay đổi tệp tin nhưng chưa commit tới cơ sở dữ liệu.
* Staged nghĩa là bạn đã đánh dấu tệp đó sẵn sàng được commit.

Điều này làm cho một dự án sử dụng Git để quản lí phiên bản có 3 phần chính: thư mục Git, thư mục làm việc (working tree), và vùng staging.

.Thư mục làm việc, vùng staging, và thư mục Git.
image::images/areas.png["Working tree, staging area, and Git directory."]

Thư mục Git là nơi Git lưu trữ metadata và cơ sở dữ liệu cho dự án của bạn.
Đây là phần quan trọng nhất của Git, và nó là cái được sao chép khi bạn  clone  một kho chứa từ một máy tính khác.

Thư mục làm việc là một checkout của bất kì một phiên bản nào đó của dự án.
Các tệp này được lấy từ cơ sở dữ liệu trong thư mục Git (vừa nói ở trên) và được đặt trên đĩa cứng để bạn có thể sử dụng hoặc sửa.

Vùng staging là một tệp, nhìn chung được chứa trong thư mục Git, nó lưu trữ thông tin về cái sẽ ở trong commit tiếp theo.
Tên kỹ thuật của nó theo lối Git là ``index'', nhưng cụm từ ``vùng staging'' cũng ổn.

Vậy, workflow của Git giờ sẽ là:

1. Bạn sửa các tệp trong thư mục làm việc của bạn.
2. Bạn tùy ý stage những thay đổi (nhưng thay đổi mà bạn muốn nó ở trong commit tiếp theo) đó để nó ở trong vùng staging.
3. Bạn thực hiện commit, những thứ ở trong vùng staging sẽ được lưu vĩnh viễn vào trong thư mục Git.

Nếu một phiên bản nào đó của một tệp ở trong thư mục Git, nó được xem như là commited.
Nếu nó được sửa và được đưa tới vùng staging, nó ở trạng thái staged.
Và nếu nó được thay đổi so với thời điểm nó được checkout nhưng chưa được staged, nó ở trạng thái modified.
Trong <<ch02-git-basics-chapter#ch02-git-basics-chapter>>, bạn sẽ học sâu hơn về các trạng thái này và cách làm thế nào bạn có thể tận dụng điểm mạnh của chúng hoặc hoàn toàn bỏ qua bước stage.
