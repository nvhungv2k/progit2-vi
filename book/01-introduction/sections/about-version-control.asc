=== Về quản lý phiên bản (version control)

(((version control)))
``Quản lý phiên bản'' là gì, và tại sao bạn nên quan tâm tới nó?
Quản lý phiên bản là quá trình ghi lại những thay đổi của một tệp tin (file) hoặc nhiều tệp tin theo thời gian, từ đó bạn có thể quay lại phiên bản tại một thời điểm nhất định nào đó.
Trên thực tế, có thể quản lí phiên bản cho bất kì loại tệp tin nào trên máy tính. Trong cuốn sách này lấy ví dụ là source code của phần mềm

Nếu bạn là một nhà thiết kế Web hoặc nhà thiết kế đồ họa và muốn lưu giữ lại mọi phiên bản của bạn đã làm, Hệ thống quản lí phiên bản (Version Control System - gọi tắt là VCS) là một lựa chọn thông minh để giúp bạn làm việc đó.
Nó cho phép bạn lấy lại bất kì một tệp tin hoặc cả dự án (project) bạn đã thực hiện, so sánh các phiên bản với nhau, dễ dàng tìm được chỗ gây ra lỗi và ai là người đã gây ra việc đó.
Sử dụng VCS cũng giúp bạn khôi phục lại tệp tin dễ dàng trong trường hợp bị mất.

==== Hệ thống Quản lý phiên bản cục bộ (LVCS)

(((version control,local)))
Nhiều người lựa chọn phương án Quản lý phiên bản bằng cách sao chép các tệp tin vào thư mục khác (với người khôn khéo hơn thì nó là thư mục có ghi lại các sự kiện xảy ra theo thời gian).
Cách này rất phổ biến bởi vì nó đơn giản, nhưng nó cũng rất hay gây ra lỗi.
Rất dễ dàng quên thư mục nào bạn đang sử dụng và dễ ghi tới tệp tin lỗi hoặc ghi đè tệp tin bạn không mong muốn.

Để giải quyết vấn đề này, các lập trình viên rất xa về trước đã phát triển Hệ thống quản lí phiên bản cục bộ (gọi tắt là LVCS), nó có cơ sở dữ liệu (database) đơn giản, cơ sở dữ liệu này giữ tất cả thay đổi của các tệp tin.

.Sơ đồ hệ thống quản lí cục bộ.
image::images/local.png[Local version control diagram]

Một trong những LVCS phổ biến được gọi là RCS, ngày nay nó vẫn có ở nhiều máy tính.
RCS làm việc bằng cách giữ các patch (sự khác nhau giữa các phiên bản của file) trong định dạng đặc biệt trên đĩa cứng; Sau đó nó dùng các patch này để tạo lại file ở bất kì phiên bản nào của file bằng sử dụng các patch này.

==== Hệ thống quản lí phiên bản tập trung (gọi tắt là CVCS)

(((version control,centralized)))
Vấn đề tiếp theo các nhà phát triển gặp phải là hợp tác với nhau trên các hệ thống khác nhau.
Để giải quyết vấn đề này thì Hệ thống quản lý phiên bản tập trung (CVCSs) được phát triển.
các CVSC này (như CVS, Subversion, và Perforce) có một máy chủ (server) chứa tất cả các tệp đã được quản lí phiên bản, và các máy khách (client) khác nhau lấy tệp tin từ máy chủ này.
(((CVS)))(((Subversion)))(((Perforce)))
Trong nhiều năm, đây là chuẩn của các hệ thống quản lí phiên bản.

.Sơ đồ hệ thống quản lí tập trung.
image::images/centralized.png[Centralized version control diagram]

CVSC có nhiều ưu điểm, đặc biệt là so với Quản lí phiên bản kiểu cục bộ.
Ví dụ, mọi người đều biết người khác đang làm cái gì trên Dự án mình đang tham gia.
Các quản trị viên (Administrator) dễ dàng hơn việc phân quyền, và dễ dàng hơn so với việc phải quản lí riêng lẻ cơ sở dữ liệu ở từng client.

Mặc dù vậy, CVSC cũng có những nhược điểm nghiêm trọng.
Nếu trong thời gian máy chủ không hoạt động thì không ai có thể hợp tác hoặc lưu những thay đổi mà họ đang thực hiện.
Nếu ổ đĩa cứng của máy chủ bị hỏng, thì toàn bộ dữ liệu sẽ mất mà chỉ còn lại dữ liệu của riêng các máy khách.
Các hệ thống quản lí phiên bản cục bộ cũng có vấn đề này -- Bởi vì lưu toàn bộ cái gì ở một nơi thì nguy cơ mất toàn bộ dữ liệu luôn thường trực.

==== Hệ thống quản lí phiên bản phân tán (gọi tắt là DVCS)

(((version control,distributed)))
Hệ thống quản lí phân tán (DVCS) xuất hiện để giải quyết nhược điểm trên.
Trong DVCS (như Git, Mercurial, Bazaar hoặc Darcs), các máy khách không chỉ lấy dữ liệu về phiên bản mới nhất của các file; mà còn sao chép toàn bộ kho chứa (repository) bao gồm toàn bộ lịch sử của Dự án.
Bởi vậy, nếu máy chủ có chết có thể dùng kho chứa của bất kì máy khách nào để khôi phục lại máy chủ.
Mỗi bản clone ở trên máy khách chính là một bản dự phòng đầy đủ.

.Sơ đồ hệ thống quản lí phân tán.
image::images/distributed.png[Distributed version control diagram]

Hơn nữa, các DVCS làm việc khá tốt với nhiều kho chứa từ xa (remote repository), điều đó cho phép có thể hợp tác với nhiều nhóm khác nhau theo các cách khác nhau đồng thời trên cùng một dự án.
Điều này cho phép bạn cài đặt nhiều loại workflow, mà điều này không thể thực hiện được với các hệ thống quản lí tập trung, như là các mô hình phân cấp.

