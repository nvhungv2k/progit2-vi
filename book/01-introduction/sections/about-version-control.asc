=== Về Version Control

(((version control)))
``version control'' là gì, và tại sao bạn nên quan tâm tới nó?
Version control là hệ thống ghi lại những thay đổi của một file hoặc nhiều file tho thời gian, từ đó bạn có thể quay lại phiên bản tại một thời điểm nhất định nào đó.
Trên thực tế, có thể version-controlled cho bất kì loại file nào trên máy tính. Trong cuốn sách này lấy ví dụ là source code của phần mềm

Nếu bạn là một nhà thiết kế Web hoặc nhà thiết kế đồ họa và muốn lưu giữ lại mọi phiên bản của bạn đã làm, Version Control System (VCS) là một lựa chọn thông minh để giúp bạn làm việc đó.
Nó cho phép bạn lấy lại bất kì một file hoặc cả project bạn đã thực hiện, so sánh các phiên bản với nhau, dễ dàng tìm được chỗ gây ra lỗi và ai là người đã gây ra việc đó.
Sử dụng VCS cũng giúp bạn khôi phục lại file dễ dàng trong trường hợp bị mất.

==== Local Version Control Systems

(((version control,local)))
Nhiều người lựa chọn version-control bằng cách sao chép file vào thư mục khác (với người khôn khéo hơn thì nó là thư mục time-stamped).
Cách này rất phổ biến bởi vì nó đơn giản, nhưng nó cũng rất hay gây ra lỗi.
Rất dễ dàng quên thư mục nào bạn đang sử dụng và dễ ghi tới file lỗi hoặc ghi đè file bạn không mong muốn.

Để giải quyết vấn đề này, các lập trình viên rất xa về trước đã phát triển local VCS, nó có cơ sở dữ liệu (database) đơn giản, cơ sở dữ liệu này giữ tất cả thay đổi của các file trong revision control.

.Local version control.
image::images/local.png[Local version control diagram]

One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today.
RCS works by keeping patch sets (that is, the differences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches.

==== Centralized Version Control Systems

(((version control,centralized)))
The next major issue that people encounter is that they need to collaborate with developers on other systems.
To deal with this problem, Centralized Version Control Systems (CVCSs) were developed.
These systems (such as CVS, Subversion, and Perforce) have a single server that contains all the versioned files, and a number of clients that check out files from that central place. (((CVS)))(((Subversion)))(((Perforce)))
For many years, this has been the standard for version control.

.Centralized version control.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what, and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything -- the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem -- whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files; rather, they fully mirror the repository, including its full history.
Thus, if any server dies, and these systems were collaborating via that server, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
