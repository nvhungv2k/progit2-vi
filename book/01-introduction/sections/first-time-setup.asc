[[_first_time]]
=== First-Time Git Setup

Bây giờ, bạn đã có Git trên hệ thống của bạn, bạn sẽ muốn làm một vài thứ để điều chỉnh môi tường Git của bạn.
Bạn chỉ phải làm công việc này duy nhất một lần trên bất kì máy tính nào; chúng sẽ strick around between upgrades.
Bạn có thể thay đổi chúng bất kì thời điểm nào bằng chạy lại các lệnh.

Git có một công cụ được gọi là `git config` cho phép bạn get và set các biến cấu hình để kiểm soát việc Git trông và làm việc như thế nào.(((git commands, config)))
Các biến này có thể được lưu ở ba nơi khác nhau:

1. Tệp `/etc/gitconfig`: chứa các biến được áp dụng cho tất cả user trên hệ thống và tất cả các repository.
Nếu bạn truyền `--system` tới lệnh `git config`, nó dọc và ghi từ tệp này.
(Bởi vì đây là một tệp cấu hình hệ thống, bạn sẽ cần phải là quản trị viên hoặc user có quyền superuser để thay đổi tệp đó.)
2. Tệp `~/.gitconfig` hoặc `~/.config/git/config`: chứa các giá trị riêng cho mỗi user.
  Bạn có thể làm 
2. `~/.gitconfig` or `~/.config/git/config` file: Values specific personally to you, the user.
  You can make Git read and write to this file specifically by passing the `--global` option, and this affects _all_ of the repositories you work with on your system.
3. `config` file in the Git directory (that is, `.git/config`) of whatever repository you're currently using: Specific to that single repository.
  You can force Git to read from and write to this file with the `--local` option, but that is in fact the default.
  (Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly.)

Each level overrides values in the previous level, so values in `.git/config` trump those in `/etc/gitconfig`.

On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` directory (`C:\Users\$USER` for most people).
It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.
If you are using version 2.x or later of Git for Windows, there is also a system-level config file at
`C:\Documents and Settings\All Users\Application Data\Git\config` on Windows XP, and in `C:\ProgramData\Git\config` on Windows Vista and newer.
This config file can only be changed by `git config -f <file>` as an admin.

==== Your Identity

The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

==== Your Editor

Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.

If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
This can be different depending on how your editor is packaged.

In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn't support all plug-ins.
If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you'll type something like this:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

If you have a 32-bit editor on a 64-bit system, the program will be installed in `C:\Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
If you are not familiar with these editors, you may need to search for specific instructions for how to set up your favorite editor with Git.
====

[WARNING]
====
You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

==== Checking Your Settings

If you want to check your configuration settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Since Git might read the same configuration variable value from more than one file, it's possible that you have an unexpected value for one of these values and you don't know why.
In cases like that, you can query Git as to the _origin_ for that value, and it will tell you which configuration file had the final say in setting that value:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
