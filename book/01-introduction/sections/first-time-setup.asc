[[_first_time]]
=== First-Time Git Setup

Bây giờ, bạn đã có Git trên hệ thống của bạn, bạn sẽ muốn làm một vài thứ để điều chỉnh môi tường Git của bạn.
Bạn chỉ phải làm công việc này duy nhất một lần trên bất kì máy tính nào.
Bạn có thể thay đổi chúng bất kì thời điểm nào bằng chạy lại các lệnh.

Git có một công cụ được gọi là `git config` cho phép bạn get và set các biến cấu hình để kiểm soát việc Git trông và làm việc như thế nào.(((git commands, config)))
Các biến này có thể được lưu ở ba nơi khác nhau:

1. Tệp `/etc/gitconfig`: chứa các biến được áp dụng cho tất cả user trên hệ thống và tất cả các repository.
Nếu bạn truyền `--system` tới lệnh `git config`, nó đọc và ghi từ tệp này.
(Bởi vì đây là một tệp cấu hình hệ thống, bạn sẽ cần phải là quản trị viên hoặc user có quyền superuser để thay đổi tệp đó.)
2. Tệp `~/.gitconfig` hoặc `~/.config/git/config`: chứa các giá trị riêng cho mỗi user.
  Bạn có thể làm Git đọc và ghi tới file này bằng truyền `--global`, và điều đó sẽ làm ảnh hưởng tới _toàn bộ _ repositories bạn làm việc trên hệ thống.
3. Tệp `config` trong thư mục Git (là thư mục `.git/config`) của repository bạn đang làm việc. Bạn có thể điều khiển Git đọc và ghi tới tệp này bằng `--local`. Trong thực tế, đây là lựa chọn mặc định.
(Bình thường, bạn cần được đặt ở một nơi nào đó bên trong Git repository cho`lựa chọn` này làm việc đúng)

Giá trị biến ở tệp mức sau sẽ ghi đè giá trị biến ở tệp mức trước. Ví dụ, cùng một biến giá trị xuất hiện ở `.git/config` và `/etc/gitconfig` thì Git sẽ sử dụng giá trị ở tệp `/etc/gitconfig`.

Trên các hệ thống Window, Git tìm kiếm tệp `.gitconfig` trong thư mục `$HOME` (thông thường là thư mục `C:\Users\$USER`).
Nó cũng vẫn tìm kiếm `/etc/gitconfig`, mặc dù, thư mục này là tương đối so với thư mục MSys - là bất kì thư mục mà bạn chọn khi cài Git.
Nếu bạn đang sử dụng Git phiên bản 2.x hoặc cao hơn cho Window, cũng có một tệp cấu hình mức hệ thống tại `C:\Documents and Settings\All Users\Application Data\Git\config` trên Windows XP, và `C:\ProgramData\Git\config` từ Windows Vista trở đi.
Tệp cấu hình này chỉ có thể thay đổi khi chạy lệnh `git config -f <file>` bằng quyền admin.

==== Thông tin nhận dạng bạn

Thứ đầu tiên bạn nên làm khi cài Git là thiết lập user name và địa chỉ email.
Điều này quan trọng bởi vì mỗi Git commit sử dụng thông tin này, và thông tin này sẽ được đưa vào commit mỗi khi bạn thực hiện commit:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Nhắc lại, bạn chỉ cần làm điều này duy nhất một lần bằng sử dụng `--global`, bởi vì Git luôn luôn sử dụng thông tin đó cho bất kì việc gì bạn làm trên hệ thống đó.
Nếu bạn muốn ghi đè thông tin này bằng user name hoặc địa chỉ email khác cho riêng một Dự án nào, bạn có thể chạy lệnh với không có `--global` khi bạn ở trong Dự án đó.

Nhiều công cụ GUI giúp bạn làm công việc này khi lần đầu tiên bạn chạy nó.

==== Bộ soạn thảo của bạn

Bây giờ, thông tin nhận dạng của bạn đã được thiết lập, bạn có thể cấu hình Bộ soạn thảo mặc định được sử dụng khi Git cần bạn nhập thông tin.
Nếu bạn không cấu hình, Git sử dụng bộ soạn thảo mặc định của hệ thống

Nếu bạn muốn sử dụng một Bộ soạn thảo khác, ví dụ Emacs, bạn sử dụng lệnh sau:

[source,console]
----
$ git config --global core.editor emacs
----

Trên hệ thống Windows, nếu bạn sử dụng Bộ soạn khác, bạn phải chỉ rõ đường dẫn tới Bộ soạn thảo đó.

Trong trường hợp của Notepad++, một Bộ soạn thảo cho lập trình phổ biến, bạn muốn sử dung phiên bản 32-bit, vì tại thời điểm viết cuốn sách này phiên bản 64-bit không hỗ trợ tất cả plug-in.
Nếu bạn ở trên hệ thống Windows 32-bit, hoặc bạn có một bộ soạn thảo 64-bit trên hệ thống 64-bit, bạn sử dụng lệnh kiểu như sau:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Nếu bạn có một bộ soạn thảo 32-bit trên hệ thống 64-bit, chương trình sẽ được cài trong `C:\Program Files (x86)`:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[Chú ý]
====
Vim, Emacs và Notepad++ là các Bộ soạn thảo phổ biến thường được sử dụng bởi các nhà phát triển trên các hệ thống kiểu Unix như Linux, macOS hoặc hệ thống Windows.
Nếu bạn không quen thuộc với các Bộ soạn thảo này, bạn có thể tìm kiếm các hướng dẫn để cài đặt sử dụng Bộ soạn thảo mà bạn ưa thích với Git.
====

[Cảnh báo]
====
Nếu bạn không thiết lập Bộ soạn thảo thì bạn có thể vướng vào trạng thái bối rối (tức là,không biết nguyên nhân tại sao) khi Git cố gắng chạy nó.
Ví dụ, trên hệ thống Windows, Git có thể không thực hiện được công việc tiếp theo khi không khởi chạy thành công Bộ soạn thảo.
====

==== Kiểm tra các thiết lập của bạn

Nếu bạn muốn kiểm tra các thiết lập cấu hình của bạn, bạn sử dụng lệnh `git config --list`, lệnh này sẽ liệt kê tất cả các thiết lập tại thời điểm chạy lệnh:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Có trường hợp bạn nhìn thấy biến nào đó xuất hiện nhiều lần, điều này là bởi vì Git đọc giá trị đó từ nhiều tệp khác nhau (Ví dụ, têp /etc/gitconfig` và `~/.gitconfig`)
Trong trường hợp này, Git sử dụng giá trị cuối cùng trong danh sách để sử dụng.

Hoặc, bạn cũng có thể kiểm tra rằng Git đang dùng giá trị nào của biến đó bằng lệnh `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[Chú ý]
====
Vì Git đọc biến cấu hình từ nhiều tệp khác nhau, cho nên có thể bạn sẽ có giá trị không mong muốn và bạn không biết tại sao.
Trong trường hợp đó, bạn có thể hỏi Git xem là giá trị đó là từ tệp nào bằng lệnh:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
