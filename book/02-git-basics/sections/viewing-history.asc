[[_viewing_history]]
=== Xem lịch sử commit

Sau khi bạn đã tạo vài commits, hoặc bạn clone một repository có sẵn nhiều commit, bạn sẽ muốn nhìn lại xem những gì đã được thực hiện trước đó.
Công cụ đơn giản và mạnh nhất đó là lệnh `git log`.

Ví dụ dưới sử dụng một project rất đơn giản tên là ``simplefit''.
Để lấy project về máy, chạy lệnh:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Khi bạn chạy lệnh `git log` trong project này, bạn sẽ có được kết quả như sau:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Mặc định, lệnh với không argument, `git log` sẽ liệt kê ra các commit được thực hiện theo thứ tự mới nhất được liệt kê trên cùng.
Ta thấy rằng, lệnh này liệt kê mỗi commit có một SHA-1 checksum, tên và địa chỉ email của tác giả, dữ liệu và message khi commit.

Lệnh `git log` có nhiều option cho phép bạn tìm kiếm thông tin dễ dàng hơn. Sau đây là một vài option phổ biến.

Một trong những option hữu dụng hơn cả là `-p` hoặc `--patch`, hiển thị sự khác nhau giữa các commit.
Ta cũng có thể giới hạn số lượng nội dung được hiển thị, ví dụ sử dụng `-2` chỉ hiển thị 2 commit mới nhất:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Option này hữu ích trong xem những người hợp tác với mình trên project đó sửa (thêm, bớt) cái gì.
Ta cũng có thể sử dụng các option thống kê tổng hợp với lệnh `git log`.
Ví dụ, nếu bạn muốn xem thống kê tổng hợp cho một commit nào đó, sử dụng `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Bạn có thể thấy rằng, `--stat` sẽ cho thông tin về danh sách các file đã bị sửa, bao nhiêu file đã thay đổi, bao nhiêu dòng trong file đó được thêm vào và bị xóa bỏ đi.
Cuối cùng là thông tin tổng hợp về commit đó.

Option khác cũng rất hữu ích là `--pretty`.
Nó dùng để thay đổi cách hiển thị đầu ra của lệnh `git log` khác với định dạng mặc định như trên.
Giá trị `oneline` của `--pretty` giúp in thông tin mỗi commit chỉ trong một dòng, nó hữu ích đối với trường hợp hiển thị nhiều commit một lúc.
Ngoài ra, `short`, `full` và `fuller` hiển thị đầu ra với định dạng tương đối giống nhau nhưng chỉ khác là thông tin chúng mang lại khác nhau theo đúng nghĩa của từ đó.

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Option thú vị nhất là `format` cho phép bạn chỉ rõ định dạng hiển thị thông tin theo ý mình.
Nó đặc biệt hữu ích khi khi bạn tạo nội dung cho machine parsing -- bởi vì bạn là người chỉ rõ định dạng, nên bạn sẽ biết được nó không bị thay đổi cùng với các cập nhật sau này của Git:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

Bảng <<pretty_format>> bên dưới liệt kê một vài lựa chọn mà lệnh `git log --pretty=format:""` sử dụng.

[[pretty_format]]
.Những lựa chọn hữu ích cho `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Lựa chọn | Chức năng
| `%H`     | Mã hash của commit
| `%h`     | Mã hash ngắn gọn của commit
| `%T`     | Mã hash dạng cây
| `%t`     | Mã hash ngắn gọn dạng cây
| `%P`     | Mã hash gốc
| `%p`     | Mã hash gốc ngắn gọn
| `%an`    | Tên tác giả
| `%ae`    | Địa chỉ thư điện tử (email) của tác giả
| `%ad`    | Ngày tác giả (định dạng tương tự như --date=option)
| `%ar`    | Ngày tác giả, tương đối
| `%cn`    | Tên của Committer
| `%ce`    | Địa chỉ email của Committer
| `%cd`    | Ngày Committer
| `%cr`    | Ngày Committer, tương đối
| `%s`     | Chủ đề
|================================

Bạn có thể đang băn khoăn về sự khác nhau giữa _tác giả_ và _committer_.
Tác giả là người khởi tạo công việc, còn committer thì là người cuối cùng áp dụng công việc đó. Cụ thể, nếu bạn gửi một patch (bản vá) tới một project và một trong các thành viên chính của dự án sử dụng patch đó, thì cả hai cùng có công -- bạn là tác giả, còn thành viên chính kia chính là commiter.
Chúng tôi sẽ trình bày kỹ hơn sự khác biệt này trong <<ch05-distributed-git#ch05-distributed-git>>.

Hai lựa chọn `oneline` và `format` có lưa chọn rất hữu ích dành cho nó là `--graph`.
Lựa chọn  này hiển thị thêm một biểu đồ về branch và lịch sử merge (trộn):

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Thông tin kiểu như thế này rất thú vị đối với chương sau khi nói về branch và merge.

Đây chỉ là các lựa chọn định dạng đầu ra đơn giản cho lệnh `git log` -- còn rất nhiều định dạng khác.
<<log_options>> liệt kê các lựa chọn chúng tôi đã trình bày.

[[log_options]]
.Các lựa chọn chung dành cho `git log`
[cols="1,4",options="header"]
|================================
| Lựa chọn          | Chức năng
| `-p`              | Hiển thị patch cho mỗi commit.
| `--stat`          | Hiển thị thống kê các file đã sửa cho mỗi commit.
| `--shortstat`     | Chỉ hiển thị dòng đã thay đổi/thêm/xóa với --stat.
| `--name-only`     | Hiển thị danh sách các file đã sửa sau thông tin commit.
| `--name-status`   | Hiển thị danh sách các file với thông tin thêm/sửa/xóa.
| `--abbrev-commit` | Chỉ hiển thị vài ki tự đầu tiên của SHA-1 checksum.
| `--relative-date` | Hiển thị ngày theo định dạng tương đối (ví dụ, ``2 tuần trước'').
| `--graph`         | Hiển thị thêm biểu đồ ASCII về branch và lịch sử merge.
| `--pretty`        | Hiển thị commit theo nhiều định dạng khác nhau. Gồm oneline, short, full, fuller, and format (Cho phép hiển thị đầu ra theo cách riêng của mình).
| `--oneline`       | Cùng chức nang với `--pretty=oneline --abbrev-commit`.
|================================

==== Giới hạn thông tin đầu ra của Log

Ngoài các lựa chọn cho điều chỉnh định dạng thông tin đầu ra, `git log` có các lựa chọn cho giới hạn thông tin đầu ra -- nghĩa là, các lựa chọn cho phép chỉ hiển thị một phần thông tin.
Bạn đã thực sự thấy một lựa chọn kiểu như vậy -- lựa chọn `-2` chỉ hiện thị 2 commit mới nhất.
Thực tế, lựa chọn cho phép hiển thị số commit bất kì `-<n>`, trong đó `n` là số nguyên hiển thị `n` commit mới nhất.
Trong thực tế, thường không sử dụng lựa chọn này, vì Git mặt định đã hiển thị thông tin theo trang, bạn chỉ thấy một trang tại một thời điểm.

Mặc dù vậy, những lựa chọn giới hạn về mặt thời gian như `--since` và `--until` lại rất hữu ích.
Ví dụ, lệnh sau hiển thị các commit được thực hiện 2 tuần gần nhất:

[source,console]
----
$ git log --since=2.weeks
----

Lệnh này làm việc với nhiều định dạng -- bạn có thể chỉ rõ ngày cụ thể như `"2008-01-15"`, hoặc ngày tương đối như `"2 years 1 day 3 minutes ago"`.

Bạn cũng có thể lọc theo thông tin mà bạn quan tâm.
Như `--author` cho phép bạn lọc theo tên tác giả, và `--grep` cho phép bạn tìm kiếm theo từ khóa (keyword) trong thông điệp commit (commit messages).

[NOTE]
====
Bạn có thể dùng nhiều lần `--author` và `--grep`, các lựa chọn này sẽ làm cho đầu ra chỉ hiển thị các commit phù hợp với bất kì `--author` nào và bất kì `--grep` patterns; Mặc dầu vậy, nếu sử dụng thêm `--all-match` thì đầu ra sẽ chỉ hiển thị các commit mà phù hợp với tất cả các `--grep` patterns.
====

Bộ lọc hữu ích khác là `-S`, lựa chọn này dùng một string và chỉ hiển thị các commit thay đổi số lần xuất hiện của string đó.
Ví dụ, nếu bạn muốn tìm commit cuối cùng mà commit đó thêm hoặc xóa tham chiếu với một hàm, bạn có thể sử dụng:

[source,console]
----
$ git log -S function_name
----

Lựa chọn hữu ích cuối cùng là truyền cho `git log` một bộ lọc là một đường dẫn.
Nếu bạn chỉ rõ một thư mục hoặc tên tệp, lựa chọn này cho phép chỉ hiển thị các commit mày có thay đổi tới những tệp này.
Đây luôn là lựa chọn dùng sau cùng và thường được đặt trước dấu double dash (`--`) để chia đường dẫn với các lựa chọn khác.

Trong <<limit_options>> chúng tôi liệt kê những lựa chọn vừa trình bày trên và một vài lựa chọn cho bạn tham chiếu khi cần.

[[limit_options]]
.Những lựa chọn để lọc thông tin đầu ra của lệnh `git log`
[cols="2,4",options="header"]
|================================
| Lựa chọn              | Mô tả
| `-<n>`                | Chỉ hiển thị n commit cuối cùng
| `--since`, `--after`  | Chỉ hiển thị các commit sau ngày này
| `--until`, `--before` | chỉ hiển thị các commit trước ngày này.
| `--author`            | Chỉ hiển thị các commit có tác giả phù hợp với pattern.
| `--committer`         | chỉ hiển thị các commit mà có committer phù hợp với pattern.
| `--grep`              | Chỉ hiển thị các commit mà thông điệp commit của nó chứa string.
| `-S`                  | chỉ hiển thị các commit mà thêm hoặc xóa code phù hợp với string.
|================================

Ví dụ, nếu bạn muốn xem commit nào sửa test files trong lịch sử Git source code mà được commit bởi Junio Hamano trong tháng 10 năm 2008 và nó không phải là merge commit, bạn chạy lệnh sau:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Trong số gần 40,000 commits trong lịch sử của Git source code, lệnh này cho đầu ra là 6 commit phù hợp với yêu cầu.

[TIP]
.Ngăn chặn hiển thị các merge commits
====
Phụ thuộc vào wordflow được sử dụng trong kho chứa của bạn, có thể có phần trăm thay đổi các commit trong lịch sử của bạn chỉ là merge commit, đây thông thường không có thông tin.
Để ngăn chặn hiển thị các merge commit thì sử dụng lựa chọn `--no-merges`.
====
