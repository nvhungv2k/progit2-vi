[[_remote_repos]]
=== Làm việc với Remote

Để có thể hợp tác với trên bất kì Dự án nào mà sử dụng Git để quản lí phiên bản, bạn cần biết làm thế nào để quản lí remote repository của mình.
Remote repository là dự án được lưu ở trên Internet hoặc nơi nào đó trên Mạng.
Bạn có thể có nhiều remote repository, ở đó bạn có quyền chỉ đọc (read-only) hoặc có quyền đọc/ghi (read/write).
Hợp tác với người khác là quá trình quản lí, quá trình đẩy lên và kéo xuống dữ liệu từ remote repository khi bạn cần chia sẻ công việc.
Quản lí remote repository là biết cách thêm remote repository, xóa remote khi không cần nữa, quản lí nhiều nhánh trên remote và định nghĩa chúng được track hay không,...
Trong phần này, sẽ trình bày một vài kỹ năng cho việc quản lí remote.

[NOTE]
.Remote repositories có thể ở trên chính máy tính của bạn.
====
Hoàn toàn bạn có thể đang làm việc với `remote` repository mà thực tế nó đang ở trên máy tính của bạn.
Từ `remote` không nhất thiết phải là một nơi nào đó trên Mạng hoặc Internet, đơn giản, nó chỉ là một repository ở một nơi khác.
Làm việc với ``remote`` repository như vậy không khác gì với remote ở trên Mạng hoặc Internet.
====

==== Hiển thị thông tin remote bạn đang dùng

Để xem remote nào bạn đã cấu hình, bạn có thể dùng lệnh `git remote`.(((git commands, remote)))
Lệnh này liệt kê tên ngắn (shortname) của mỗi remote mà bạn đã thiết lập.
Nếu bạn clone một repository nào đó, thì ít nhất bạn sẽ nhìn thấy `origin` -- đó là tên mặc định Git sử dụng cho remote mà bạn clone từ nó:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Bạn cũng có thể sử dụng `-v` khi muốn hiển thị cả tên ngắn và URL của remote:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Nếu bạn có hơn một remote, lệnh sẽ liệt kê tất cả chúng.
Ví dụ, một repository với nhiều remote cho hợp tác công việc với nhiều người trong như sau:

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Điều đó có nghĩa rằng ta có thể kéo những công việc của bất kì user nào khá dễ.
Ngoài ra, chúng ta có thể có quyền đẩy dữ liệu lên một hoặc nhiều remote (kiến thức này không đề cập ở đây).

Lưu ý rằng các remote sử dụng nhiều loại giao thức khác nhau; kiến thức này được trình bày rõ hơn trong <<ch04-git-on-the-server#_getting_git_on_a_server>>.

==== Thêm Remote tới repository của bạn

Như trên ta đã thấy lệnh `git clone` mặc định chức năng của nó là thêm `origin` remote.
Bây giờ, làm thế nào để thêm một remote mới và gán cho nó một tên ngắn để dễ dàng cho sử dụng sau này, sử dụng lệnh `git remote add <shortname> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Bây giờ bạn có thể sử dụng `pb` để thay thế cho đường dẫn tới remote vừa mới thêm.
Ví dụ, bạn muốn tải toàn bộ thông tin mà Paul có nhưng bạn vẫn chưa có trong repository của mình, bạn chạy lệnh `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Nhánh master của Paul bây giờ có thể truy cập từ máy tính của bạn `pb/master` -- bạn cũng có thể trộn nó với một trong các nhánh của bạn, hoặc bạn có thể checkout một nhánh mới tại thời điểm đó.
(Nội dung về nhánh trên Git và làm thế nào sử dụng chúng chi tiết hơn trong <<ch03-git-branching#ch03-git-branching>>.)

[[_fetching_and_pulling]]
==== Fetching và pulling dữ liệu từ remote

Như bạn đã thấy, để lấy dữ liệu từ remote, bạn chạy lệnh:(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

Lệnh này sẽ kéo xuống toàn bộ dữ liệu từ remote mà bạn chưa có.
Sau đó, bạn có tham chiếu tới tất cả các nhánh từ remote đó, từ đó bạn có thể trộn hoặc kiểm tra ở bất kì thời điểm nào.

Nếu bạn clone một repository, lệnh sẽ tự động thêm remote repository đó với tên `origin`.
Vậy nên lệnh `git fetch origin` sẽ lấy toàn bộ công việc mới đã được đẩy lên server tính từ khi bạn clone nó.
Chú ý rằng, lệnh `git fetch` chỉ tải xuống dữ liệu xuống repository địa phương của bạn -- nó không tự động trộn nó với bất kì công việc nào khác hoặc sửa cái bạn đang làm việc.
Bạn phải trộn nó bằng tay với công việc của bạn khi bạn thấy điều đó cần thiết.

Nếu nhánh hiện tại của bạn được thiết lập để bám một nhánh trên server (xem phần tiếp theo và <<ch03-git-branching#ch03-git-branching>> để thêm thông tin), bạn có thể sử dụng lệnh `git pull` để tự động lấy dữ liệu và trộn nhánh trên server với nhánh hiện tại của bạn.(((git commands, pull)))
Điều này có thể là workflow thoải mái và dễ dàng hơn đối với bạn; và mặc định, lệnh `git clone` tự động thiết lập nhánh master địa phương để bám nhánh master trên server mà bạn clone từ nó.
Nói chung, chạy lệnh `git pull` lấy dữ liệu từ server bạn clone từ nó và tự động thử trộn nó vào công việc mà bạn hiện đang làm việc.

[[_pushing_remotes]]
==== Pushing to Your Remotes

Tại một thời điểm, khi bạn muốn chia sẻ công việc của mình, bạn phải đẩy nó lên remote.
Lệnh cho thực hiện công việc này là : `git push <remote> <branch>`.(((git commands, push)))
Nếu bạn muốn đẩy nhánh master địa phương tới `origin` server, thì bạn có thể chạy lệnh sau để đẩy các commits bạn đã thực hiện lên server:

[source,console]
----
$ git push origin master
----

Lệnh này chỉ làm việc khi bạn clone từ một server mà bạn có quyền ghi và không có ai đẩy dữ liệu trong thời gian từ khi bạn clone tới khi bạn đẩy dữ liệu lên.
Nghĩa là, nếu bạn và một ai khác clone tại cùng một thời điểm và họ đẩy lên upstream và sau đó bạn đẩy lên, thì lệnh của bạn sẽ không được thực hiện.
Đầu tiên, bạn sẽ phải lấy công việc của họ xuống và tích hợp nó vào trong công việc của bạn trước khi bạn được phép đẩy công việc của mình lên.
Xem <<ch03-git-branching#ch03-git-branching>> để học thêm về cách đẩy dữ liệu lên remote.

[[_inspecting_remote]]
==== Hiển thị thông tin về Remote

Nếu bạn muốn xem thông tin về một remote cụ thể nào đó, bạn có thể sử dụng lệnh `git remote show <remote>`.(((git commands, remote)))
Nếu bạn chạy lệnh với tên ngắn, như là `origin`, bạn có thể có được thông tin như sau:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Nó liệt kê URL cho remote, cũng như thông tin về nhánh của remote đó.
Lệnh nói với bạn rằng lệnh `git pull`, sau khi lấy toàn bộ dữ liệu từ remote xuống, nó sẽ thực hiện trộn nhánh master ở từ remote với nhánh master của bạn.
Ngoài ra, nó cũng có danh sách tất cả các tham chiếu tới nhánh ở remote mà nó kéo xuống.

Đây là ví dụ đơn giản, nhiều khả năng bạn sẽ gặp phải.
Khi bạn sử dụng Git sâu hơn, bạn có thể tìm hiểu thêm thông tin từ lệnh `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Lệnh này cho biết nhánh nào tự động được đẩy khi bạn chạy lệnh `git push` khi đang ở một nhánh nào đó.
Nó cũng chỉ cho bạn biết rằng nhánh nào trên remote bạn chưa có, nhánh nào bạn đã xóa, và nhiều nhánh có thể tự động được trộn khi sử dụng lệnh `git pull`.

==== Đổi tên và xóa remote

Bạn có thể chạy lệnh `git remote rename` để  thay đổi tên ngắn của remote.(((git commands, remote)))
Ví dụ, nếu bạn muốn đổi tên `pb` thành `paul`, làm như sau:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Bây giờ, tất cả tham chiếu tới các nhánh trên remote cũng thay đổi theo. Ví dụ, trước đây là `pb/master` thì bây giờ là `paul/master`.

Nếu bạn muốn xóa bỏ một remote vì một lí do nào đó (di chuyển server, không hợp tác với người khác qua remote này nữa,...), giờ bạn muốn xóa remote đó đi, sử dụng một trong hai lệnh `git remote remove` hoặc `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

Khi bạn xóa tham chiếu tới remote như trên thì tất cả các nhánh và các cài đặt liên quan tới remote đó cũng bị xóa theo.
