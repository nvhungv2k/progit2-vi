[[_undoing]]
=== Undoing Things

Bây giờ, bạn muốn undo một công việc nào đó.
Phần này, sẽ trình bày một vài công cụ giúp bạn undo. Nhưng không phải lúc nào cũng có thể undo được những thay đổi bạn đã làm.
Đây là một trong số những lĩnh vực mà Git sẽ làm mất công việc của bạn nếu bạn làm sai.

Một trong những undo phổ biến là khi bạn commit quá sớm và có thể quên add các tệp, hoặc muốn ghi lại thông điệp cho commit.
Nếu bạn muốn làm lại commit đó, thực hiện các công việc bạn đã quên, stage chúng và commit lại sử dụng lựa chọn `--amend`:

[source,console]
----
$ git commit --amend
----

Lệnh này sẽ lấy staging area và sử dụng nó cho commit.
Nếu bạn không thay đổi gì so với commit cuối cùng (ví dụ, bạn chay ngay lệnh này sau khi bạn vừa mới commit), thì snapshot sẽ giống nhau và bạn chỉ thay đổi mỗi thông điệp.

Khi bạn chạy lệnh trên, cửa sổ cho phép bạn nhập thông điệp hiện ra, nội dung ban đầu của nó chính là thông điệp của commit ngay trước đó bạn vừa thực hiện, bạn nhập thông điệp mới, và thông điệp này sẽ ghi đè thông điệp trước đó.

Nếu bạn commit và sau đó nhận ra là mình quên thực hiện thay đổi trong một tệp mà bạn muốn thêm vào commit này, bạn làm như sau:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Thì commit sau sẽ thay thế cho commit ngay trước đó. Kết quả là bạn 03 lệnh trên chỉ có duy nhất một commit với nội dung là có cả `forgotten_file`, nhưng thông điệp vẫn là ``'initial commit'``

[NOTE]
====
Quan trọng bạn phải hiểu rằng khi bạn sửa commit vừa mới thực hiện, bạn sẽ không thực hiện quá nhiều thay đổi như là _thay thế_ toàn bộ bằng một commit mới mà commit cũ không liên quan gì. Khi thực hiện điều này thì commit mà bị sửa sẽ được Git coi như chưa bao giờ xảy ra và nó sẽ không tồn tại trong history.

Giá trị hiển nhiên của việc sửa commit là làm cho commit của bạn chuyên nghiệp hơn, tránh trường hợp có các commit với thông điệp `'Ô, quên thêm một tệp'` hoặc commit mà chỉ  sửa những lỗi nhỏ (như dấu chấm phảy, lỗi đánh máy,...)
====

[[_unstaging]]
==== Unstaging a Staged File

Tiếp theo, tìm hiểu cách làm thế nào làm việc với staing area và working directory khi chúng thay đổi.
Tiện lợi là ở chỗ , thông tin đầu ra của lệnh `git status` có phần nhắc nhở bạn làm thế nào để undo những thay đổi.
Ví dụ, xét khi bạn đã thay đổi 02 tệp và muốn commit chúng riêng, như bạn nhỡ chạy lệnh `git add *` và stage cả hai.
Giờ làm thế nào để unstage một trong số chúng.

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

Ngay bên dưới dòng `'Changes to be committed'`, Nó nói rằng sử dụng `git reset HEAD <file>...` để unstage.
Vậy, sử dụng lời khuyên đó, ta thử unstage tệp `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Lệnh này hơi lạ, nhưng nó làm việc tốt.
Ta thấy, tệp `CONTRIBUTING.md` đã sửa những lại thấy rằng nó đang unstaged.

[NOTE]
=====
Đúng là lệnh `git reset` là một lệnh nguy hiểm, đặc biệt nếu bạn sử dụng nó với cờ `--hard`.
Mặc dù vậy, trong tình huống ở trên, tệp trong working directory không bị tiếp xúc, bởi vậy nó tương đối an toàn.
=====

Để biết thêm về lệnh `git reset` và muốn làm chủ nó. Vui lòng xem tại <<ch07-git-tools#_git_reset>>.

==== Unmodifying a Modified File

Bây giờ, bạn nhận ra rằng bạn lại không muốn giữ những thay đổi đã thực hiện ở tệp `CONTRIBUTING.md`.
Có thể dễ dàng unmodify (tức là, đưa nó về trạng thái mà trước khi tiến hành thay đổi nó, trạng thái mà nó ở commit gần nhất)
May mắn là, lệnh `git status` cũng cho ta biết phải làm thế nào.
Trong ví dụ vừa làm trên, thông tin ra cho vùng unstaged area như sau:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Ta thấy rằng, nó chỉ cho ta cách làm thế nào để loại bỏ những thay đổi đã thực hiện.
Thử làm theo:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Ta thấy rằng, những thay đổi đã bị loại bỏ.

[IMPORTANT]
=====
Lệnh `git checkout -- <file>` là một lệnh nguy hiển. Bất kì thay đổi bạn đã làm với tệp đó là không lấy lại được.
Đừng sử dụng lệnh này trừ trường hộp bạn biết chắc rằng bạn không cần tệp nữa.
=====

Nếu bạn muốn giữa những thay đổi đã làm nhưng lại không muốn sử dụng nó ngay bây giờ, stashing và phân nhánh là lĩnh vực cần tìm hiểu tại <<ch03-git-branching#ch03-git-branching>>.

Nhớ rằng, mọi thứ _committed_ trong Git hầu như luôn luôn có thể khôi phục. Thậm chí các commit ở trên các nhánh đã bị xóa hoặc các commit đã bị ghi đè bằng cờ `--amend`. Để hiểu sâu hơn tìm hiểu về phần khôi phục dữ liệu tại <<ch10-git-internals#_data_recovery>>.
Mặc dù vậy, bất cứ cái gì bạn mất mà chưa được commit thì nhiều khả năng không bao giờ lấy lại được.
